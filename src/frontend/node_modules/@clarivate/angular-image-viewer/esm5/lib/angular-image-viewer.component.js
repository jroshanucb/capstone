import { __assign, __decorate, __param } from "tslib";
import { Component, HostListener, Optional, Inject, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { CustomImageEvent } from './models/custom-image-event-model';
import { CdkDrag } from '@angular/cdk/drag-drop';
var DEFAULT_CONFIG = {
    btnClass: 'default',
    zoomFactor: 0.1,
    containerBackgroundColor: '#e4dede',
    primaryColor: '',
    wheelZoom: false,
    allowFullscreen: true,
    allowKeyboardNavigation: true,
    btnShow: {
        zoomIn: true,
        zoomOut: true,
        rotateClockwise: true,
        rotateCounterClockwise: true,
        next: true,
        prev: true
    },
    btnIcons: {
        zoomIn: 'fa fa-plus',
        zoomOut: 'fa fa-minus',
        rotateClockwise: 'fa fa-refresh',
        rotateCounterClockwise: 'fa fa-undo',
        next: 'fa fa-chevron-right',
        prev: 'fa fa-chevron-left',
        fullscreen: 'fa fa-arrows-alt',
    }
};
var AngularImageViewerComponent = /** @class */ (function () {
    function AngularImageViewerComponent(moduleConfig) {
        this.moduleConfig = moduleConfig;
        this.index = 0;
        this.footerTexts = [
            'Image',
            'of',
            'View previous or next image',
            'using < > on the keyboard'
        ];
        this.indexChange = new EventEmitter();
        this.configChange = new EventEmitter();
        this.customImageEvent = new EventEmitter();
        this.styleHeight = '98vh';
        this.style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };
        this.fullscreen = false;
        this.loading = true;
        this.isDragOn = false;
        this.scale = 1;
        this.rotation = 0;
        this.hovered = false;
    }
    AngularImageViewerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.screenHeightOccupied) {
            this.styleHeight = 'calc(98vh - ' + this.screenHeightOccupied + 'px)';
        }
        else if (changes.index) {
            this.reset();
        }
    };
    AngularImageViewerComponent.prototype.ngOnInit = function () {
        var merged = this.mergeConfig(DEFAULT_CONFIG, this.moduleConfig);
        this.config = this.mergeConfig(merged, this.config);
        this.triggerConfigBinding();
    };
    AngularImageViewerComponent.prototype.nextImage = function (event) {
        if (this.canNavigate(event) && this.index < this.src.length - 1) {
            this.loading = true;
            this.index++;
            this.triggerIndexBinding();
            this.reset();
        }
    };
    AngularImageViewerComponent.prototype.prevImage = function (event) {
        if (this.canNavigate(event) && this.index > 0) {
            this.loading = true;
            this.index--;
            this.triggerIndexBinding();
            this.reset();
        }
    };
    AngularImageViewerComponent.prototype.zoomIn = function () {
        this.scale *= (1 + this.config.zoomFactor);
        this.updateStyle();
    };
    AngularImageViewerComponent.prototype.zoomOut = function () {
        if (this.scale > this.config.zoomFactor) {
            this.scale /= (1 + this.config.zoomFactor);
        }
        this.updateStyle();
    };
    AngularImageViewerComponent.prototype.scrollZoom = function (evt) {
        if (this.config.wheelZoom) {
            evt.deltaY > 0 ? this.zoomOut() : this.zoomIn();
            return false;
        }
    };
    AngularImageViewerComponent.prototype.rotateClockwise = function () {
        this.rotation += 90;
        this.updateStyle();
    };
    AngularImageViewerComponent.prototype.rotateCounterClockwise = function () {
        this.rotation -= 90;
        this.updateStyle();
    };
    AngularImageViewerComponent.prototype.onLoad = function () {
        this.loading = false;
    };
    AngularImageViewerComponent.prototype.onLoadStart = function () {
        this.loading = true;
    };
    AngularImageViewerComponent.prototype.imageNotFound = function () {
    };
    AngularImageViewerComponent.prototype.onDragStart = function (evt) {
        if (evt.source._dragRef._initialTransform && evt.source._dragRef._initialTransform.length > 0) {
            var myTranslate = evt.source._dragRef._initialTransform.split(' rotate')[0];
            var myRotate = this.style.transform.split(' rotate')[1];
            evt.source._dragRef._initialTransform = myTranslate + " rotate" + myRotate;
        }
        else {
            evt.source._dragRef._initialTransform = this.style.transform;
        }
    };
    AngularImageViewerComponent.prototype.toggleFullscreen = function () {
        this.fullscreen = !this.fullscreen;
        if (!this.fullscreen) {
            this.reset();
        }
    };
    AngularImageViewerComponent.prototype.triggerIndexBinding = function () {
        this.indexChange.emit(this.index);
    };
    AngularImageViewerComponent.prototype.triggerConfigBinding = function () {
        this.configChange.next(this.config);
    };
    AngularImageViewerComponent.prototype.fireCustomEvent = function (name, imageIndex) {
        this.customImageEvent.emit(new CustomImageEvent(name, imageIndex));
    };
    AngularImageViewerComponent.prototype.reset = function () {
        this.scale = 1;
        this.rotation = 0;
        this.updateStyle();
        this.cdkDrag.reset();
    };
    AngularImageViewerComponent.prototype.onMouseOver = function () {
        this.hovered = true;
    };
    AngularImageViewerComponent.prototype.onMouseLeave = function () {
        this.hovered = false;
    };
    AngularImageViewerComponent.prototype.canNavigate = function (event) {
        if (event.type === 'keyup') {
            return (this.config.allowKeyboardNavigation && this.hovered);
        }
        else if (event.type === 'click') {
            return this.hovered;
        }
    };
    AngularImageViewerComponent.prototype.updateStyle = function () {
        this.style.transform = "rotate(" + this.rotation + "deg) scale(" + this.scale + ")";
    };
    AngularImageViewerComponent.prototype.mergeConfig = function (defaultValues, overrideValues) {
        var result = __assign({}, defaultValues);
        if (overrideValues) {
            result = __assign(__assign({}, defaultValues), overrideValues);
            if (overrideValues.btnIcons) {
                result.btnIcons = __assign(__assign({}, defaultValues.btnIcons), overrideValues.btnIcons);
            }
        }
        return result;
    };
    AngularImageViewerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['config',] }] }
    ]; };
    __decorate([
        ViewChild(CdkDrag, { static: true })
    ], AngularImageViewerComponent.prototype, "cdkDrag", void 0);
    __decorate([
        Input()
    ], AngularImageViewerComponent.prototype, "src", void 0);
    __decorate([
        Input()
    ], AngularImageViewerComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], AngularImageViewerComponent.prototype, "screenHeightOccupied", void 0);
    __decorate([
        Input()
    ], AngularImageViewerComponent.prototype, "index", void 0);
    __decorate([
        Input()
    ], AngularImageViewerComponent.prototype, "imageName", void 0);
    __decorate([
        Input()
    ], AngularImageViewerComponent.prototype, "footerTexts", void 0);
    __decorate([
        Output()
    ], AngularImageViewerComponent.prototype, "indexChange", void 0);
    __decorate([
        Output()
    ], AngularImageViewerComponent.prototype, "configChange", void 0);
    __decorate([
        Output()
    ], AngularImageViewerComponent.prototype, "customImageEvent", void 0);
    __decorate([
        HostListener('window:keyup.ArrowRight', ['$event'])
    ], AngularImageViewerComponent.prototype, "nextImage", null);
    __decorate([
        HostListener('window:keyup.ArrowLeft', ['$event'])
    ], AngularImageViewerComponent.prototype, "prevImage", null);
    __decorate([
        HostListener('mouseover')
    ], AngularImageViewerComponent.prototype, "onMouseOver", null);
    __decorate([
        HostListener('mouseleave')
    ], AngularImageViewerComponent.prototype, "onMouseLeave", null);
    AngularImageViewerComponent = __decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: 'angular-image-viewer',
            template: "<div [appScreenfull]=\"fullscreen\" class=\"img-container\" [style.backgroundColor]=\"config.containerBackgroundColor\"\n    (wheel)=\"scrollZoom($event)\">\n    <div class=\"image-name\" *ngIf=\"imageName\">\n      <span>{{imageName}}</span>\n    </div>\n\n    <div cdkDrag class=\"drag-element\">\n        <img [src]=\"src[index]\" [ngStyle]=\"style\" alt=\"\"\n            (cdkDragStarted)=\"onDragStart($event)\"\n            (load)=\"onLoad()\" (loadstart)=\"onLoadStart()\" (error)=\"imageNotFound()\" />\n    </div>\n\n    <div class=\"spinner-container\" *ngIf=\"loading\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <div class=\"button-container\">\n        <button type=\"button\" id=\"ngx-fs-btn\" [class]=\"config.btnClass\" (click)=\"toggleFullscreen()\"\n        [style.color]=\"config.primaryColor\" *ngIf=\"config.allowFullscreen\">\n            <span [class]=\"config.btnIcons.fullscreen\"></span>\n        </button>\n\n        <div class=\"button-container-bottom\">\n            <button type=\"button\" [class]=\"config.btnClass\" *ngFor=\"let cBtn of config.customBtns\"\n            [style.color]=\"config.primaryColor\" (click)=\"fireCustomEvent(cBtn.name, index)\">\n                <span [class]=\"cBtn.icon\"></span>\n            </button>\n\n            <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.rotateCounterClockwise\"\n            [style.color]=\"config.primaryColor\" (click)=\"rotateCounterClockwise()\">\n                <span [class]=\"config.btnIcons.rotateCounterClockwise\"></span>\n            </button>\n            <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.rotateClockwise\"\n            [style.color]=\"config.primaryColor\" (click)=\"rotateClockwise()\">\n                <span [class]=\"config.btnIcons.rotateClockwise\"></span>\n            </button>\n\n            <div class=\"button-zoom-in-out-container\">\n                <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.zoomIn\"\n                [style.color]=\"config.primaryColor\" (click)=\"zoomIn()\">\n                    <span [class]=\"config.btnIcons.zoomIn\"></span>\n                </button>\n                <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.zoomOut\"\n                [style.color]=\"config.primaryColor\" (click)=\"zoomOut()\">\n                    <span [class]=\"config.btnIcons.zoomOut\"></span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"nav-button-container\" *ngIf=\"src.length > 1\">\n        <button type=\"button\" #prevImg [class]=\"config.btnClass\" (click)=\"prevImage($event); prevImg.blur()\"\n        [style.color]=\"config.primaryColor\"  [disabled]=\"index === 0\">\n            <span [class]=\"config.btnIcons.prev\"></span>\n        </button>\n        <button type=\"button\" #nextImg [class]=\"config.btnClass\" (click)=\"nextImage($event); nextImg.blur()\"\n        [style.color]=\"config.primaryColor\"  [disabled]=\"index === src.length - 1\">\n            <span [class]=\"config.btnIcons.next\"></span>\n        </button>\n    </div>\n    <div class=\"footer-section\">\n        <div class=\"image-txt-count-left-align\"><span>{{footerTexts[0]}} {{index + 1}} {{footerTexts[1]}} {{src.length}}</span></div>\n        <div class=\"footer-txt-right-align\">\n            <span class=\"footer-txt-right-align-title\" [style.color]=\"config.primaryColor\">{{footerTexts[2]}}</span>\n            <span class=\"footer-txt-right-align-note\">{{footerTexts[3]}}</span>\n        </div>\n    </div>\n</div>\n",
            styles: [".img-container{position:relative;width:100%;height:100%;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;overflow:hidden}.img-container .drag-element{position:absolute;top:35px;right:78px;width:calc(100% - 156px);height:calc(100% - 85px);cursor:-webkit-grab;cursor:grab;text-align:center}.img-container .drag-element img{padding:0;max-width:100%;max-height:100%}.img-container .drag-element:active{cursor:-webkit-grabbing;cursor:grabbing}.img-container button{z-index:99}.img-container button:not(:disabled){cursor:pointer}#ngx-fs-btn{top:15px}button.default{height:24px;width:24px;border-radius:31px;opacity:.9;-webkit-transition:opacity .2s;transition:opacity .2s;font-size:12px;background:inherit;background-color:#fff;border:none;box-shadow:0 0 5px rgba(0,0,0,.3490196078)}button.default:focus{outline:0;opacity:1}button.default:hover{opacity:1}button.default:disabled{opacity:.3}.nav-button-container>button{position:relative;right:0;margin:0 10px}.nav-button-container{text-align:right;position:absolute;z-index:98;bottom:60px;left:0;right:10px}.nav-button-container button.default{height:30px;margin:0;font-size:14px}.nav-button-container button.default:first-child{border-radius:4px 0 0 4px}.nav-button-container button.default:last-child{margin-left:10px;border-radius:0 4px 4px 0}.button-container{position:absolute;top:10px;right:10px;width:24px;height:calc(100% - 115px);z-index:98}.button-container .button-container-bottom{position:absolute;bottom:0}.button-container .button-container-bottom button.default{margin-top:10px}.button-container .button-container-bottom .button-zoom-in-out-container{margin-top:15px}.button-container .button-container-bottom .button-zoom-in-out-container button.default{margin:0;border-radius:0;height:30px}.button-container .button-container-bottom .button-zoom-in-out-container button.default:first-child{margin-bottom:1px}.spinner-container{position:absolute;left:0;right:0;top:0;bottom:0;width:60px;height:60px;margin:auto;padding:10px;background-color:rgba(0,0,0,.4);border-radius:25%}.spinner{border-width:7px;border-style:solid;border-color:#ccc #ccc #222;border-radius:50%;height:100%;width:100%;box-sizing:border-box;-webkit-animation:2s linear infinite rotation;animation:2s linear infinite rotation}.footer-section{position:absolute;bottom:10px;left:0;width:100%;line-height:18px;z-index:98}.footer-section .image-txt-count-left-align{float:left;padding:0 10px;font-family:\"Source Sans Pro SemiBold\";font-size:14;color:#333}.footer-section .footer-txt-right-align{float:right;padding:0 10px;text-align:right}.footer-section .footer-txt-right-align span.footer-txt-right-align-title{display:block;font-family:\"Source Sans Pro SemiBold\";font-size:14}.footer-section .footer-txt-right-align span.footer-txt-right-align-note{color:#767676;font-family:\"Source Sans Pro\";font-size:12}.image-name{position:absolute;top:10px;left:10px;z-index:98;font-family:\"Source Sans Pro SemiBold\";font-size:16;color:#333}@keyframes rotation{from{-webkit-transform:rotate(0)}to{-webkit-transform:rotate(359deg)}}@-webkit-keyframes rotation{from{-webkit-transform:rotate(0)}to{-webkit-transform:rotate(359deg)}}"]
        }),
        __param(0, Optional()), __param(0, Inject('config'))
    ], AngularImageViewerComponent);
    return AngularImageViewerComponent;
}());
export { AngularImageViewerComponent };
//# sourceMappingURL=data:application/json;base64,