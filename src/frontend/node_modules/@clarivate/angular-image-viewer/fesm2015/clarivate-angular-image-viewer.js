import { __decorate, __param } from 'tslib';
import { EventEmitter, Optional, Inject, ViewChild, Input, Output, HostListener, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { CdkDrag, DragDropModule } from '@angular/cdk/drag-drop';
import { CommonModule } from '@angular/common';

class CustomImageEvent {
    constructor(name, imageIndex) {
        this.name = name;
        this.imageIndex = imageIndex;
    }
}

const DEFAULT_CONFIG = {
    btnClass: 'default',
    zoomFactor: 0.1,
    containerBackgroundColor: '#e4dede',
    primaryColor: '',
    wheelZoom: false,
    allowFullscreen: true,
    allowKeyboardNavigation: true,
    btnShow: {
        zoomIn: true,
        zoomOut: true,
        rotateClockwise: true,
        rotateCounterClockwise: true,
        next: true,
        prev: true
    },
    btnIcons: {
        zoomIn: 'fa fa-plus',
        zoomOut: 'fa fa-minus',
        rotateClockwise: 'fa fa-refresh',
        rotateCounterClockwise: 'fa fa-undo',
        next: 'fa fa-chevron-right',
        prev: 'fa fa-chevron-left',
        fullscreen: 'fa fa-arrows-alt',
    }
};
let AngularImageViewerComponent = class AngularImageViewerComponent {
    constructor(moduleConfig) {
        this.moduleConfig = moduleConfig;
        this.index = 0;
        this.footerTexts = [
            'Image',
            'of',
            'View previous or next image',
            'using < > on the keyboard'
        ];
        this.indexChange = new EventEmitter();
        this.configChange = new EventEmitter();
        this.customImageEvent = new EventEmitter();
        this.styleHeight = '98vh';
        this.style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };
        this.fullscreen = false;
        this.loading = true;
        this.isDragOn = false;
        this.scale = 1;
        this.rotation = 0;
        this.hovered = false;
    }
    ngOnChanges(changes) {
        if (changes.screenHeightOccupied) {
            this.styleHeight = 'calc(98vh - ' + this.screenHeightOccupied + 'px)';
        }
        else if (changes.index) {
            this.reset();
        }
    }
    ngOnInit() {
        const merged = this.mergeConfig(DEFAULT_CONFIG, this.moduleConfig);
        this.config = this.mergeConfig(merged, this.config);
        this.triggerConfigBinding();
    }
    nextImage(event) {
        if (this.canNavigate(event) && this.index < this.src.length - 1) {
            this.loading = true;
            this.index++;
            this.triggerIndexBinding();
            this.reset();
        }
    }
    prevImage(event) {
        if (this.canNavigate(event) && this.index > 0) {
            this.loading = true;
            this.index--;
            this.triggerIndexBinding();
            this.reset();
        }
    }
    zoomIn() {
        this.scale *= (1 + this.config.zoomFactor);
        this.updateStyle();
    }
    zoomOut() {
        if (this.scale > this.config.zoomFactor) {
            this.scale /= (1 + this.config.zoomFactor);
        }
        this.updateStyle();
    }
    scrollZoom(evt) {
        if (this.config.wheelZoom) {
            evt.deltaY > 0 ? this.zoomOut() : this.zoomIn();
            return false;
        }
    }
    rotateClockwise() {
        this.rotation += 90;
        this.updateStyle();
    }
    rotateCounterClockwise() {
        this.rotation -= 90;
        this.updateStyle();
    }
    onLoad() {
        this.loading = false;
    }
    onLoadStart() {
        this.loading = true;
    }
    imageNotFound() {
    }
    onDragStart(evt) {
        if (evt.source._dragRef._initialTransform && evt.source._dragRef._initialTransform.length > 0) {
            const myTranslate = evt.source._dragRef._initialTransform.split(' rotate')[0];
            const myRotate = this.style.transform.split(' rotate')[1];
            evt.source._dragRef._initialTransform = `${myTranslate} rotate${myRotate}`;
        }
        else {
            evt.source._dragRef._initialTransform = this.style.transform;
        }
    }
    toggleFullscreen() {
        this.fullscreen = !this.fullscreen;
        if (!this.fullscreen) {
            this.reset();
        }
    }
    triggerIndexBinding() {
        this.indexChange.emit(this.index);
    }
    triggerConfigBinding() {
        this.configChange.next(this.config);
    }
    fireCustomEvent(name, imageIndex) {
        this.customImageEvent.emit(new CustomImageEvent(name, imageIndex));
    }
    reset() {
        this.scale = 1;
        this.rotation = 0;
        this.updateStyle();
        this.cdkDrag.reset();
    }
    onMouseOver() {
        this.hovered = true;
    }
    onMouseLeave() {
        this.hovered = false;
    }
    canNavigate(event) {
        if (event.type === 'keyup') {
            return (this.config.allowKeyboardNavigation && this.hovered);
        }
        else if (event.type === 'click') {
            return this.hovered;
        }
    }
    updateStyle() {
        this.style.transform = `rotate(${this.rotation}deg) scale(${this.scale})`;
    }
    mergeConfig(defaultValues, overrideValues) {
        let result = Object.assign({}, defaultValues);
        if (overrideValues) {
            result = Object.assign(Object.assign({}, defaultValues), overrideValues);
            if (overrideValues.btnIcons) {
                result.btnIcons = Object.assign(Object.assign({}, defaultValues.btnIcons), overrideValues.btnIcons);
            }
        }
        return result;
    }
};
AngularImageViewerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['config',] }] }
];
__decorate([
    ViewChild(CdkDrag, { static: true })
], AngularImageViewerComponent.prototype, "cdkDrag", void 0);
__decorate([
    Input()
], AngularImageViewerComponent.prototype, "src", void 0);
__decorate([
    Input()
], AngularImageViewerComponent.prototype, "config", void 0);
__decorate([
    Input()
], AngularImageViewerComponent.prototype, "screenHeightOccupied", void 0);
__decorate([
    Input()
], AngularImageViewerComponent.prototype, "index", void 0);
__decorate([
    Input()
], AngularImageViewerComponent.prototype, "imageName", void 0);
__decorate([
    Input()
], AngularImageViewerComponent.prototype, "footerTexts", void 0);
__decorate([
    Output()
], AngularImageViewerComponent.prototype, "indexChange", void 0);
__decorate([
    Output()
], AngularImageViewerComponent.prototype, "configChange", void 0);
__decorate([
    Output()
], AngularImageViewerComponent.prototype, "customImageEvent", void 0);
__decorate([
    HostListener('window:keyup.ArrowRight', ['$event'])
], AngularImageViewerComponent.prototype, "nextImage", null);
__decorate([
    HostListener('window:keyup.ArrowLeft', ['$event'])
], AngularImageViewerComponent.prototype, "prevImage", null);
__decorate([
    HostListener('mouseover')
], AngularImageViewerComponent.prototype, "onMouseOver", null);
__decorate([
    HostListener('mouseleave')
], AngularImageViewerComponent.prototype, "onMouseLeave", null);
AngularImageViewerComponent = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: 'angular-image-viewer',
        template: "<div [appScreenfull]=\"fullscreen\" class=\"img-container\" [style.backgroundColor]=\"config.containerBackgroundColor\"\n    (wheel)=\"scrollZoom($event)\">\n    <div class=\"image-name\" *ngIf=\"imageName\">\n      <span>{{imageName}}</span>\n    </div>\n\n    <div cdkDrag class=\"drag-element\">\n        <img [src]=\"src[index]\" [ngStyle]=\"style\" alt=\"\"\n            (cdkDragStarted)=\"onDragStart($event)\"\n            (load)=\"onLoad()\" (loadstart)=\"onLoadStart()\" (error)=\"imageNotFound()\" />\n    </div>\n\n    <div class=\"spinner-container\" *ngIf=\"loading\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <div class=\"button-container\">\n        <button type=\"button\" id=\"ngx-fs-btn\" [class]=\"config.btnClass\" (click)=\"toggleFullscreen()\"\n        [style.color]=\"config.primaryColor\" *ngIf=\"config.allowFullscreen\">\n            <span [class]=\"config.btnIcons.fullscreen\"></span>\n        </button>\n\n        <div class=\"button-container-bottom\">\n            <button type=\"button\" [class]=\"config.btnClass\" *ngFor=\"let cBtn of config.customBtns\"\n            [style.color]=\"config.primaryColor\" (click)=\"fireCustomEvent(cBtn.name, index)\">\n                <span [class]=\"cBtn.icon\"></span>\n            </button>\n\n            <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.rotateCounterClockwise\"\n            [style.color]=\"config.primaryColor\" (click)=\"rotateCounterClockwise()\">\n                <span [class]=\"config.btnIcons.rotateCounterClockwise\"></span>\n            </button>\n            <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.rotateClockwise\"\n            [style.color]=\"config.primaryColor\" (click)=\"rotateClockwise()\">\n                <span [class]=\"config.btnIcons.rotateClockwise\"></span>\n            </button>\n\n            <div class=\"button-zoom-in-out-container\">\n                <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.zoomIn\"\n                [style.color]=\"config.primaryColor\" (click)=\"zoomIn()\">\n                    <span [class]=\"config.btnIcons.zoomIn\"></span>\n                </button>\n                <button type=\"button\" [class]=\"config.btnClass\" *ngIf=\"config.btnShow.zoomOut\"\n                [style.color]=\"config.primaryColor\" (click)=\"zoomOut()\">\n                    <span [class]=\"config.btnIcons.zoomOut\"></span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"nav-button-container\" *ngIf=\"src.length > 1\">\n        <button type=\"button\" #prevImg [class]=\"config.btnClass\" (click)=\"prevImage($event); prevImg.blur()\"\n        [style.color]=\"config.primaryColor\"  [disabled]=\"index === 0\">\n            <span [class]=\"config.btnIcons.prev\"></span>\n        </button>\n        <button type=\"button\" #nextImg [class]=\"config.btnClass\" (click)=\"nextImage($event); nextImg.blur()\"\n        [style.color]=\"config.primaryColor\"  [disabled]=\"index === src.length - 1\">\n            <span [class]=\"config.btnIcons.next\"></span>\n        </button>\n    </div>\n    <div class=\"footer-section\">\n        <div class=\"image-txt-count-left-align\"><span>{{footerTexts[0]}} {{index + 1}} {{footerTexts[1]}} {{src.length}}</span></div>\n        <div class=\"footer-txt-right-align\">\n            <span class=\"footer-txt-right-align-title\" [style.color]=\"config.primaryColor\">{{footerTexts[2]}}</span>\n            <span class=\"footer-txt-right-align-note\">{{footerTexts[3]}}</span>\n        </div>\n    </div>\n</div>\n",
        styles: [".img-container{position:relative;width:100%;height:100%;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;overflow:hidden}.img-container .drag-element{position:absolute;top:35px;right:78px;width:calc(100% - 156px);height:calc(100% - 85px);cursor:-webkit-grab;cursor:grab;text-align:center}.img-container .drag-element img{padding:0;max-width:100%;max-height:100%}.img-container .drag-element:active{cursor:-webkit-grabbing;cursor:grabbing}.img-container button{z-index:99}.img-container button:not(:disabled){cursor:pointer}#ngx-fs-btn{top:15px}button.default{height:24px;width:24px;border-radius:31px;opacity:.9;-webkit-transition:opacity .2s;transition:opacity .2s;font-size:12px;background:inherit;background-color:#fff;border:none;box-shadow:0 0 5px rgba(0,0,0,.3490196078)}button.default:focus{outline:0;opacity:1}button.default:hover{opacity:1}button.default:disabled{opacity:.3}.nav-button-container>button{position:relative;right:0;margin:0 10px}.nav-button-container{text-align:right;position:absolute;z-index:98;bottom:60px;left:0;right:10px}.nav-button-container button.default{height:30px;margin:0;font-size:14px}.nav-button-container button.default:first-child{border-radius:4px 0 0 4px}.nav-button-container button.default:last-child{margin-left:10px;border-radius:0 4px 4px 0}.button-container{position:absolute;top:10px;right:10px;width:24px;height:calc(100% - 115px);z-index:98}.button-container .button-container-bottom{position:absolute;bottom:0}.button-container .button-container-bottom button.default{margin-top:10px}.button-container .button-container-bottom .button-zoom-in-out-container{margin-top:15px}.button-container .button-container-bottom .button-zoom-in-out-container button.default{margin:0;border-radius:0;height:30px}.button-container .button-container-bottom .button-zoom-in-out-container button.default:first-child{margin-bottom:1px}.spinner-container{position:absolute;left:0;right:0;top:0;bottom:0;width:60px;height:60px;margin:auto;padding:10px;background-color:rgba(0,0,0,.4);border-radius:25%}.spinner{border-width:7px;border-style:solid;border-color:#ccc #ccc #222;border-radius:50%;height:100%;width:100%;box-sizing:border-box;-webkit-animation:2s linear infinite rotation;animation:2s linear infinite rotation}.footer-section{position:absolute;bottom:10px;left:0;width:100%;line-height:18px;z-index:98}.footer-section .image-txt-count-left-align{float:left;padding:0 10px;font-family:\"Source Sans Pro SemiBold\";font-size:14;color:#333}.footer-section .footer-txt-right-align{float:right;padding:0 10px;text-align:right}.footer-section .footer-txt-right-align span.footer-txt-right-align-title{display:block;font-family:\"Source Sans Pro SemiBold\";font-size:14}.footer-section .footer-txt-right-align span.footer-txt-right-align-note{color:#767676;font-family:\"Source Sans Pro\";font-size:12}.image-name{position:absolute;top:10px;left:10px;z-index:98;font-family:\"Source Sans Pro SemiBold\";font-size:16;color:#333}@keyframes rotation{from{-webkit-transform:rotate(0)}to{-webkit-transform:rotate(359deg)}}@-webkit-keyframes rotation{from{-webkit-transform:rotate(0)}to{-webkit-transform:rotate(359deg)}}"]
    }),
    __param(0, Optional()), __param(0, Inject('config'))
], AngularImageViewerComponent);

// import * as screenfull from 'screenfull';
let FullScreenDirective = class FullScreenDirective {
    constructor(el) {
        this.el = el;
    }
    ngOnChanges(changes) {
        // tslint:disable-next-line: no-string-literal
        if (!changes['fullscreenState'].isFirstChange()) {
            if (this.fullscreenState) {
                const element = this.el.nativeElement;
                // tslint:disable-next-line: max-line-length
                const requestMethod = element.requestFullscreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;
                if (requestMethod) { // Native full screen.
                    requestMethod.call(element);
                }
                else {
                    console.log('FullScreen Request Method Not Supported on this browser.');
                }
            }
            else {
                const element = document;
                // tslint:disable-next-line: max-line-length
                const requestMethod = element.cancelFullscreen || element.webkitExitFullscreen || element.webkitCancelFullScreen || element.mozCancelFullScreen || element.msExitFullScreen;
                if (requestMethod) { // Native Cancel full screen.
                    requestMethod.call(element);
                }
                else {
                    console.error('Angular Image Viewer: FullScreen Cancel Request Method Not Supported on this browser.');
                }
            }
        }
    }
    ngOnInit() {
    }
};
FullScreenDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input('appScreenfull')
], FullScreenDirective.prototype, "fullscreenState", void 0);
FullScreenDirective = __decorate([
    Directive({
        selector: '[appScreenfull]'
    })
], FullScreenDirective);

let AngularImageViewerModule = class AngularImageViewerModule {
};
AngularImageViewerModule = __decorate([
    NgModule({
        declarations: [AngularImageViewerComponent, FullScreenDirective],
        imports: [
            CommonModule,
            DragDropModule
        ],
        exports: [AngularImageViewerComponent, FullScreenDirective, DragDropModule]
    })
], AngularImageViewerModule);

/*
 * Public API Surface of angular-image-viewer
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularImageViewerComponent, AngularImageViewerModule, CustomImageEvent, FullScreenDirective };
//# sourceMappingURL=clarivate-angular-image-viewer.js.map
