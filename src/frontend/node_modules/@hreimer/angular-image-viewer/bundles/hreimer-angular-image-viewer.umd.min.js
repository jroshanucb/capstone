!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms"),require("@angular/platform-browser"),require("@angular/platform-browser/animations")):"function"==typeof define&&define.amd?define("@hreimer/angular-image-viewer",["exports","@angular/core","@angular/common","@angular/forms","@angular/platform-browser","@angular/platform-browser/animations"],t):t(((n="undefined"!=typeof globalThis?globalThis:n||self).hreimer=n.hreimer||{},n.hreimer["angular-image-viewer"]={}),n.ng.core,n.ng.common,n.ng.forms,n.ng.platformBrowser,n.ng.platformBrowser.animations)}(this,(function(n,t,e,o,s,i){"use strict";var a=function(n,t){this.name=n,this.imageIndex=t},r={btnContainerClass:"btn-container",btnClass:"default",btnSubClass:"material-icons",zoomFactor:.1,containerBackgroundColor:"#ccc",wheelZoom:!1,allowFullscreen:!0,allowKeyboardNavigation:!0,btnShow:{zoomIn:!0,zoomOut:!0,rotateClockwise:!0,rotateCounterClockwise:!0,next:!0,prev:!0,reset:!0},btnIcons:{zoomIn:{classes:"fa fa-plus",text:"zoom_in"},zoomOut:{classes:"fa fa-minus",text:"zoom_out"},rotateClockwise:{classes:"fa fa-repeat",text:"rotate_right"},rotateCounterClockwise:{classes:"fa fa-undo",text:"rotate_left"},next:{classes:"fa fa-arrow-right",text:"arrow_right"},prev:{classes:"fa fa-arrow-left",text:"arrow_left"},fullscreen:{classes:"fa fa-arrows-alt",text:"fullscreen"},reset:{classes:"fa fa-undo",text:"restore"}}},c=function(){function n(n,e){this.moduleConfig=n,this.sanitizer=e,this.index=0,this.indexChange=new t.EventEmitter,this.configChange=new t.EventEmitter,this.customImageEvent=new t.EventEmitter,this.styleHeight="100%",this.style={transform:"",msTransform:"",oTransform:"",webkitTransform:""},this.fullscreen=!1,this.loading=!0,this.scale=1,this.rotation=0,this.translateX=0,this.translateY=0,this.hovered=!1}return n.prototype.ngOnChanges=function(n){n.screenHeightOccupied&&(this.styleHeight="calc(100% - "+this.screenHeightOccupied+"px)")},n.prototype.ngOnInit=function(){var n=this.mergeConfig(r,this.moduleConfig);this.config=this.mergeConfig(n,this.config),this.triggerConfigBinding()},n.prototype.nextImage=function(n){this.canNavigate(n)&&this.index<this.src.length-1&&(this.loading=!0,this.index++,this.triggerIndexBinding(),this.reset())},n.prototype.prevImage=function(n){this.canNavigate(n)&&this.index>0&&(this.loading=!0,this.index--,this.triggerIndexBinding(),this.reset())},n.prototype.zoomIn=function(){this.scale*=1+this.config.zoomFactor,this.updateStyle()},n.prototype.zoomOut=function(){this.scale>this.config.zoomFactor&&(this.scale/=1+this.config.zoomFactor),this.updateStyle()},n.prototype.scrollZoom=function(n){if(this.config.wheelZoom)return n.deltaY>0?this.zoomOut():this.zoomIn(),!1},n.prototype.rotateClockwise=function(){this.rotation+=90,this.updateStyle()},n.prototype.rotateCounterClockwise=function(){this.rotation-=90,this.updateStyle()},n.prototype.onLoad=function(n){this.loading=!1},n.prototype.onLoadStart=function(n){this.loading=!0},n.prototype.imageNotFound=function(n){},n.prototype.onDragOver=function(n){this.translateX+=n.clientX-this.prevX,this.translateY+=n.clientY-this.prevY,this.prevX=n.clientX,this.prevY=n.clientY,this.updateStyle()},n.prototype.onDragStart=function(n){n.dataTransfer&&n.dataTransfer.setDragImage&&n.dataTransfer.setDragImage(n.target.nextElementSibling,0,0),this.prevX=n.clientX,this.prevY=n.clientY},n.prototype.toggleFullscreen=function(){this.fullscreen=!this.fullscreen,this.fullscreen||this.reset()},n.prototype.triggerIndexBinding=function(){this.indexChange.emit(this.index)},n.prototype.triggerConfigBinding=function(){this.configChange.next(this.config)},n.prototype.fireCustomEvent=function(n,t){this.customImageEvent.emit(new a(n,t))},n.prototype.reset=function(){this.scale=1,this.rotation=0,this.translateX=0,this.translateY=0,this.updateStyle()},n.prototype.onMouseOver=function(){this.hovered=!0},n.prototype.onMouseLeave=function(){this.hovered=!1},n.prototype.canNavigate=function(n){return null==n||this.config.allowKeyboardNavigation&&this.hovered},n.prototype.updateStyle=function(){this.style.transform="translate("+this.translateX+"px, "+this.translateY+"px) rotate("+this.rotation+"deg) scale("+this.scale+")",this.style.msTransform=this.style.transform,this.style.webkitTransform=this.style.transform,this.style.oTransform=this.style.transform},n.prototype.mergeConfig=function(n,t){var e=Object.assign({},n);return t&&(e=Object.assign(Object.assign({},n),t),t.btnIcons&&(e.btnIcons=Object.assign(Object.assign({},n.btnIcons),t.btnIcons))),e},n}();c.decorators=[{type:t.Component,args:[{selector:"angular-image-viewer",template:'<div [appScreenfull]="fullscreen" class="img-container" [style.height]="styleHeight"\n    [style.backgroundColor]="config.containerBackgroundColor" (wheel)="scrollZoom($event)"\n    (dragover)="onDragOver($event)">\n    <img [src]="src[index]" [ngStyle]="style" alt="Image not found..." (dragstart)="onDragStart($event)"\n        (load)="onLoad(src[index])" (error)="imageNotFound(src[index])" (loadstart)="onLoadStart(src[index])" />\n    \x3c!-- Div below will be used to hide the \'ghost\' image when dragging --\x3e\n    <div></div>\n    <div class="spinner-container" *ngIf="loading">\n        <div class="spinner"></div>\n    </div>\n\n    \x3c!-- Button Container --\x3e\n    <div class="btn-container" [class]="config.btnContainerClass">\n        \x3c!-- Rotate Counter Clockwise --\x3e\n        <ng-container *ngIf="config.btnShow.rotateCounterClockwise">\n            <button type="button" [class]="config.btnClass"\n                (click)="rotateCounterClockwise()" *ngIf="config.btnIcons.rotateCounterClockwise.classes" >\n                <span [class]="config.btnIcons.rotateCounterClockwise.classes"></span>\n            </button>\n            <a [class]="config.btnClass" *ngIf="config.btnIcons.rotateCounterClockwise.text" (click)="rotateCounterClockwise()">\n                <span [class]="config.btnSubClass">{{config.btnIcons.rotateCounterClockwise.text}}</span>\n            </a>\n        </ng-container>\n\n        \x3c!-- Rotate Clockwise --\x3e\n        <ng-container *ngIf="config.btnShow.rotateClockwise">\n            <button type="button" [class]="config.btnClass"\n                (click)="rotateClockwise()" *ngIf="config.btnIcons.rotateClockwise.classes" >\n                <span [class]="config.btnIcons.rotateClockwise.classes"></span>\n            </button>\n            <a [class]="config.btnClass" *ngIf="config.btnIcons.rotateClockwise.text" (click)="rotateClockwise()">\n                <span [class]="config.btnSubClass">{{config.btnIcons.rotateClockwise.text}}</span>\n            </a>\n        </ng-container>\n\n        \x3c!-- Zoom Out --\x3e\n        <ng-container *ngIf="config.btnShow.zoomOut">\n            <button type="button" [class]="config.btnClass"\n                (click)="zoomOut()" *ngIf="config.btnIcons.zoomOut.classes" >\n                <span [class]="config.btnIcons.zoomOut.classes"></span>\n            </button>\n            <a [class]="config.btnClass" *ngIf="config.btnIcons.zoomOut.text" (click)="zoomOut()">\n                <span [class]="config.btnSubClass">{{config.btnIcons.zoomOut.text}}</span>\n            </a>\n        </ng-container>\n\n        \x3c!-- Zoom In --\x3e\n        <ng-container *ngIf="config.btnShow.zoomIn">\n            <button type="button" [class]="config.btnClass"\n                (click)="zoomIn()" *ngIf="config.btnIcons.zoomIn.classes" >\n                <span [class]="config.btnIcons.zoomIn.classes"></span>\n            </button>\n            <a [class]="config.btnClass" *ngIf="config.btnIcons.zoomIn.text" (click)="zoomIn()">\n                <span [class]="config.btnSubClass">{{config.btnIcons.zoomIn.text}}</span>\n            </a>\n        </ng-container>\n\n        \x3c!-- Fullscreen --\x3e\n        <ng-container *ngIf="config.allowFullscreen">\n            <button type="button" [class]="config.btnClass"\n                (click)="toggleFullscreen()" *ngIf="config.btnIcons.fullscreen.classes" >\n                <span [class]="config.btnIcons.fullscreen.classes"></span>\n            </button>\n            <a [class]="config.btnClass" *ngIf="config.btnIcons.fullscreen.text" (click)="toggleFullscreen()">\n                <span [class]="config.btnSubClass">{{config.btnIcons.fullscreen.text}}</span>\n            </a>\n        </ng-container>\n\n        \x3c!-- Reset --\x3e\n        <ng-container *ngIf="config.btnShow.reset">\n            <button type="button" [class]="config.btnClass"\n                (click)="reset()" *ngIf="config.btnIcons.reset.classes" >\n                <span [class]="config.btnIcons.reset.classes"></span>\n            </button>\n            <a [class]="config.btnClass" *ngIf="config.btnIcons.reset.text" (click)="reset()">\n                <span [class]="config.btnSubClass">{{config.btnIcons.reset.text}}</span>\n            </a>\n        </ng-container>\n\n        \x3c!-- Custom Buttons --\x3e\n        <ng-container *ngFor="let cBtn of config.customBtns">\n            <button *ngIf="cBtn.icon.classes" type="button" [class]="config.btnClass"\n                (click)="fireCustomEvent(cBtn.name, index)">\n                <span *ngIf="cBtn.icon.classes" [class]="cBtn.icon.classes"></span>\n            </button>\n            <ng-container *ngIf="cBtn.icon.text">\n                <a [class]="config.btnClass" *ngIf="cBtn.icon.text" (click)="fireCustomEvent(cBtn.name, index)">\n                    <span [class]="config.btnSubClass">{{cBtn.icon.text}}</span>\n                </a>\n            </ng-container>\n        </ng-container>\n    </div>\n\n    \x3c!-- Prev / Next Nav Container --\x3e\n    <div class="nav-button-container" *ngIf="src.length > 1">\n        <button *ngIf="config.btnShow.next" type="button" [class]="config.btnClass" (click)="prevImage($event)" [disabled]="index === 0">\n            <span *ngIf="config.btnIcons.prev.classes" [class]="config.btnIcons.prev.classes"></span>\n        </button>\n        <a [class]="config.btnClass" *ngIf="config.btnIcons.prev.text" (click)="prevImage($event)">\n            <span [class]="config.btnSubClass">{{config.btnIcons.prev.text}}</span>\n        </a>\n        <button *ngIf="config.btnShow.next" type="button" [class]="config.btnClass" (click)="nextImage($event)"\n            [disabled]="index === src.length - 1">\n            <span *ngIf="config.btnIcons.next.classes" [class]="config.btnIcons.next.classes"></span>\n        </button>\n        <a [class]="config.btnClass" *ngIf="config.btnIcons.next.text" (click)="nextImage($event)">\n            <span [class]="config.btnSubClass">{{config.btnIcons.next.text}}</span>\n        </a>\n    </div>\n</div>',styles:[".img-container{width:100%;display:flex;justify-content:center;align-items:center;overflow:hidden}.img-container .btn-container{position:absolute;z-index:98;text-align:right;bottom:0;right:0;width:100%}.img-container img{max-width:100%;max-height:100%}.img-container a,.img-container button{z-index:99;position:relative}.img-container a:not(:disabled),.img-container button:not(:disabled){cursor:pointer}a.default,button.default{height:40px;width:40px;border:1px solid #555;border-radius:50%;background-color:#fff;opacity:.7;transition:opacity .2s}a.default:hover,button.default:hover{opacity:1}a.default:disabled,button.default:disabled{opacity:.25}.nav-button-container>a,.nav-button-container>button{position:relative;right:0;margin:0 10px}.nav-button-container{text-align:center;position:absolute;z-index:98;bottom:50px;left:0;right:0}.spinner-container{position:absolute;left:0;right:0;top:0;bottom:0;width:60px;height:60px;margin:auto;padding:10px;background-color:rgba(0,0,0,.4);border-radius:25%}.spinner{border:7px solid;border-color:#ccc #ccc #222;border-radius:50%;height:100%;width:100%;box-sizing:border-box;-webkit-animation:rotation 2s linear infinite;animation:rotation 2s linear infinite}@keyframes rotation{0%{-webkit-transform:rotate(0deg)}to{-webkit-transform:rotate(359deg)}}@-webkit-keyframes rotation{0%{-webkit-transform:rotate(0deg)}to{-webkit-transform:rotate(359deg)}}"]}]}],c.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:["config"]}]},{type:s.DomSanitizer}]},c.propDecorators={src:[{type:t.Input}],screenHeightOccupied:[{type:t.Input}],index:[{type:t.Input}],config:[{type:t.Input}],indexChange:[{type:t.Output}],configChange:[{type:t.Output}],customImageEvent:[{type:t.Output}],nextImage:[{type:t.HostListener,args:["window:keyup.ArrowRight",["$event"]]}],prevImage:[{type:t.HostListener,args:["window:keyup.ArrowLeft",["$event"]]}],onMouseOver:[{type:t.HostListener,args:["mouseover"]}],onMouseLeave:[{type:t.HostListener,args:["mouseleave"]}]};var l=function(){function n(n){this.el=n}return n.prototype.ngOnChanges=function(n){var t,e;n.fullscreenState.isFirstChange()||(this.fullscreenState?(e=(t=this.el.nativeElement).requestFullscreen||t.webkitRequestFullScreen||t.mozRequestFullScreen||t.msRequestFullScreen)?e.call(t):console.log("FullScreen Request Method Not Supported on this browser."):(e=(t=document).cancelFullscreen||t.webkitExitFullscreen||t.webkitCancelFullScreen||t.mozCancelFullScreen||t.msExitFullScreen)?e.call(t):console.log("FullScreen Cancel Request Method Not Supported on this browser."))},n.prototype.ngOnInit=function(){},n}();l.decorators=[{type:t.Directive,args:[{selector:"[appScreenfull]"}]}],l.ctorParameters=function(){return[{type:t.ElementRef}]},l.propDecorators={fullscreenState:[{type:t.Input,args:["appScreenfull"]}]};var g=function(){};g.decorators=[{type:t.NgModule,args:[{declarations:[c,l],imports:[e.CommonModule,s.BrowserModule,o.FormsModule,i.BrowserAnimationsModule],exports:[c,l]}]}],n.AngularImageViewerComponent=c,n.AngularImageViewerModule=g,n.CustomImageEvent=a,n.FullScreenDirective=l,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=hreimer-angular-image-viewer.umd.min.js.map