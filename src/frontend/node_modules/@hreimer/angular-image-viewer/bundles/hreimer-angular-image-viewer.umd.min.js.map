{"version":3,"sources":["../../../projects/angular-image-viewer/src/lib/models/custom-image-event-model.ts","../../../projects/angular-image-viewer/src/lib/angular-image-viewer.component.ts","../../../projects/angular-image-viewer/src/lib/directives/full-screen.directive.ts","../../../projects/angular-image-viewer/src/lib/angular-image-viewer.module.ts"],"names":["name","imageIndex","this","DEFAULT_CONFIG","btnContainerClass","btnClass","btnSubClass","zoomFactor","containerBackgroundColor","wheelZoom","allowFullscreen","allowKeyboardNavigation","btnShow","zoomIn","zoomOut","rotateClockwise","rotateCounterClockwise","next","prev","reset","btnIcons","classes","text","fullscreen","AngularImageViewerComponent","moduleConfig","sanitizer","index","indexChange","EventEmitter","configChange","customImageEvent","styleHeight","style","transform","msTransform","oTransform","webkitTransform","loading","scale","rotation","translateX","translateY","hovered","prototype","ngOnChanges","changes","screenHeightOccupied","ngOnInit","merged","mergeConfig","config","triggerConfigBinding","nextImage","event","canNavigate","src","length","triggerIndexBinding","prevImage","updateStyle","scrollZoom","evt","deltaY","onLoad","url","onLoadStart","imageNotFound","onDragOver","clientX","prevX","clientY","prevY","onDragStart","dataTransfer","setDragImage","target","nextElementSibling","toggleFullscreen","emit","fireCustomEvent","CustomImageEvent","onMouseOver","onMouseLeave","defaultValues","overrideValues","result","Object","assign","Component","args","selector","template","Optional","type","Inject","DomSanitizer","Input","Output","HostListener","FullScreenDirective","el","element","requestMethod","isFirstChange","fullscreenState","nativeElement","requestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullScreen","call","console","log","document","cancelFullscreen","webkitExitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullScreen","Directive","ElementRef","NgModule","declarations","imports","CommonModule","BrowserModule","FormsModule","BrowserAnimationsModule","exports"],"mappings":"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","sourcesContent":["export class CustomImageEvent {\n    name: string;\n    imageIndex: number;\n\n    constructor(name, imageIndex) {\n        this.name = name;\n        this.imageIndex = imageIndex;\n    }\n}\n","import { Component, OnInit, HostListener, Optional, Inject, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { ImageViewerConfig } from './models/image-viewer-config.model';\nimport { CustomImageEvent } from './models/custom-image-event-model';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\nconst DEFAULT_CONFIG: ImageViewerConfig = {\n  btnContainerClass: 'btn-container',\n  btnClass: 'default',\n  btnSubClass: 'material-icons',\n  zoomFactor: 0.1,\n  containerBackgroundColor: '#ccc',\n  wheelZoom: false,\n  allowFullscreen: true,\n  allowKeyboardNavigation: true,\n  btnShow: {\n    zoomIn: true,\n    zoomOut: true,\n    rotateClockwise: true,\n    rotateCounterClockwise: true,\n    next: true,\n    prev: true,\n    reset: true\n  },\n  btnIcons: {\n    zoomIn: {\n      classes: 'fa fa-plus',\n      text: 'zoom_in'\n    },\n    zoomOut: {\n      classes: 'fa fa-minus',\n      text: 'zoom_out'\n    },\n    rotateClockwise:  {\n      classes: 'fa fa-repeat',\n      text: 'rotate_right'\n    },\n    rotateCounterClockwise:  {\n      classes: 'fa fa-undo',\n      text: 'rotate_left'\n    },\n    next:  {\n      classes: 'fa fa-arrow-right',\n      text: 'arrow_right'\n    },\n    prev:  {\n      classes: 'fa fa-arrow-left',\n      text: 'arrow_left'\n    },\n    fullscreen:  {\n      classes: 'fa fa-arrows-alt',\n      text: 'fullscreen'\n    },\n    reset:  {\n      classes: 'fa fa-undo',\n      text: 'restore'\n    },\n  }\n};\n\n\n@Component({\n  selector: 'angular-image-viewer',\n  templateUrl: './angular-image-viewer.component.html',\n  styleUrls: ['./angular-image-viewer.component.scss']\n})\nexport class AngularImageViewerComponent implements OnInit, OnChanges {\n\n  @Input()\n  src: string[];\n\n  @Input()\n  screenHeightOccupied: 0;             // In Px\n\n  @Input()\n  index = 0;\n\n  @Input()\n  config: ImageViewerConfig;\n\n  @Output()\n  indexChange: EventEmitter<number> = new EventEmitter();\n\n  @Output()\n  configChange: EventEmitter<ImageViewerConfig> = new EventEmitter();\n\n  @Output()\n  customImageEvent: EventEmitter<CustomImageEvent> = new EventEmitter();\n\n  styleHeight = '100%';\n\n  public style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };\n  public fullscreen = false;\n  public loading = true;\n  private scale = 1;\n  private rotation = 0;\n  private translateX = 0;\n  private translateY = 0;\n  private prevX: number;\n  private prevY: number;\n  private hovered = false;\n\n  constructor(@Optional() @Inject('config') public moduleConfig: ImageViewerConfig,\n              private sanitizer: DomSanitizer) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.screenHeightOccupied) {\n      this.styleHeight = 'calc(100% - ' + this.screenHeightOccupied + 'px)';\n      // console.log('Style Height:', this.styleHeight);\n    }\n  }\n\n  ngOnInit() {\n    const merged = this.mergeConfig(DEFAULT_CONFIG, this.moduleConfig);\n    this.config = this.mergeConfig(merged, this.config);\n    this.triggerConfigBinding();\n  }\n\n  @HostListener('window:keyup.ArrowRight', ['$event'])\n  nextImage(event) {\n    if (this.canNavigate(event) && this.index < this.src.length - 1) {\n      this.loading = true;\n      this.index++;\n      this.triggerIndexBinding();\n      this.reset();\n    }\n  }\n\n  @HostListener('window:keyup.ArrowLeft', ['$event'])\n  prevImage(event) {\n    if (this.canNavigate(event) && this.index > 0) {\n      this.loading = true;\n      this.index--;\n      this.triggerIndexBinding();\n      this.reset();\n    }\n  }\n\n  zoomIn() {\n    this.scale *= (1 + this.config.zoomFactor);\n    this.updateStyle();\n  }\n\n  zoomOut() {\n    if (this.scale > this.config.zoomFactor) {\n      this.scale /= (1 + this.config.zoomFactor);\n    }\n    this.updateStyle();\n  }\n\n  scrollZoom(evt) {\n    if (this.config.wheelZoom) {\n      evt.deltaY > 0 ? this.zoomOut() : this.zoomIn();\n      return false;\n    }\n  }\n\n  rotateClockwise() {\n    this.rotation += 90;\n    this.updateStyle();\n  }\n\n  rotateCounterClockwise() {\n    this.rotation -= 90;\n    this.updateStyle();\n  }\n\n  onLoad(url) {\n    // console.log('Loading Image Done:', url);\n    this.loading = false;\n  }\n\n  onLoadStart(url) {\n    // console.log('Loading Image:', url);\n    this.loading = true;\n  }\n\n  imageNotFound(url) {\n    // console.log('Image not found Url:', url);\n  }\n\n  onDragOver(evt) {\n    this.translateX += (evt.clientX - this.prevX);\n    this.translateY += (evt.clientY - this.prevY);\n    this.prevX = evt.clientX;\n    this.prevY = evt.clientY;\n    this.updateStyle();\n  }\n\n  onDragStart(evt) {\n    if (evt.dataTransfer && evt.dataTransfer.setDragImage) {\n      evt.dataTransfer.setDragImage(evt.target.nextElementSibling, 0, 0);\n    }\n    this.prevX = evt.clientX;\n    this.prevY = evt.clientY;\n  }\n\n  toggleFullscreen() {\n    this.fullscreen = !this.fullscreen;\n    if (!this.fullscreen) {\n      this.reset();\n    }\n  }\n\n  triggerIndexBinding() {\n    this.indexChange.emit(this.index);\n  }\n\n  triggerConfigBinding() {\n    this.configChange.next(this.config);\n  }\n\n  fireCustomEvent(name, imageIndex) {\n    this.customImageEvent.emit(new CustomImageEvent(name, imageIndex));\n  }\n\n  reset() {\n    this.scale = 1;\n    this.rotation = 0;\n    this.translateX = 0;\n    this.translateY = 0;\n    this.updateStyle();\n  }\n\n  @HostListener('mouseover')\n  onMouseOver() {\n    this.hovered = true;\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    this.hovered = false;\n  }\n\n  private canNavigate(event: any) {\n    return event == null || (this.config.allowKeyboardNavigation && this.hovered);\n  }\n\n  private updateStyle() {\n    this.style.transform = `translate(${this.translateX}px, ${this.translateY}px) rotate(${this.rotation}deg) scale(${this.scale})`;\n    this.style.msTransform = this.style.transform;\n    this.style.webkitTransform = this.style.transform;\n    this.style.oTransform = this.style.transform;\n  }\n\n  private mergeConfig(defaultValues: ImageViewerConfig, overrideValues: ImageViewerConfig): ImageViewerConfig {\n    let result: ImageViewerConfig = { ...defaultValues };\n    if (overrideValues) {\n      result = { ...defaultValues, ...overrideValues };\n\n      if (overrideValues.btnIcons) {\n        result.btnIcons = { ...defaultValues.btnIcons, ...overrideValues.btnIcons };\n      }\n    }\n    return result;\n  }\n\n}\n","import { Directive, Input, ElementRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n// import * as screenfull from 'screenfull';\n\n@Directive({\n  selector: '[appScreenfull]'\n})\nexport class FullScreenDirective implements OnChanges, OnInit {\n\n  @Input('appScreenfull') fullscreenState: boolean;\n\n  constructor(private el: ElementRef) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // console.log('fullscreenState isFirstChange:', changes[\"fullscreenState\"].isFirstChange());\n    // console.log('fullscreenState', this.fullscreenState);\n    // if (screenfull.isEnabled) {\n    //   screenfull.toggle(this.el.nativeElement);\n    // }\n    // if (this.fullscreenState && screenfull.isEnabled) {\n    //   screenfull.request(this.el.nativeElement);\n    // } else if (screenfull.isEnabled) {\n    //   screenfull.exit();\n    // }\n\n    // tslint:disable-next-line: no-string-literal\n    if (!changes['fullscreenState'].isFirstChange()) {\n\n      if (this.fullscreenState) {\n        const element: any = this.el.nativeElement;\n\n        // tslint:disable-next-line: max-line-length\n        const requestMethod = element.requestFullscreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;\n\n        if (requestMethod) { // Native full screen.\n          requestMethod.call(element);\n        } else {\n          console.log('FullScreen Request Method Not Supported on this browser.');\n        }\n      } else {\n        const element: any = document;\n\n        // tslint:disable-next-line: max-line-length\n        const requestMethod = element.cancelFullscreen || element.webkitExitFullscreen || element.webkitCancelFullScreen || element.mozCancelFullScreen || element.msExitFullScreen;\n\n        if (requestMethod) { // Native Cancel full screen.\n          requestMethod.call(element);\n        } else {\n          console.log('FullScreen Cancel Request Method Not Supported on this browser.');\n        }\n      }\n    }\n\n  }\n\n  ngOnInit() {\n\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularImageViewerComponent } from './angular-image-viewer.component';\nimport { FullScreenDirective } from './directives/full-screen.directive';\n// import { ImageViewerConfig } from 'dist/angular-image-viewer/public-api';\n\n\n\n@NgModule({\n  declarations: [AngularImageViewerComponent, FullScreenDirective],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n  ],\n  exports: [AngularImageViewerComponent, FullScreenDirective]\n})\nexport class AngularImageViewerModule {\n  /**\n   * forRoot\n   * @returns A module with its provider dependencies\n   */\n  // static forRoot(imageViewerConfig: ImageViewerConfig): ModuleWithProviders {\n  //   return {\n  //     ngModule: AngularImageViewerModule,\n  //     providers: [\n  //       {\n  //         provide: imageViewerConfig,\n  //         useValue: imageViewerConfig\n  //       }\n  //     ]\n  //   };\n  // }\n}\n"]}