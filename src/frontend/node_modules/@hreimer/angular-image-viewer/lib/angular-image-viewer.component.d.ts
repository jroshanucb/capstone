import { OnInit, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ImageViewerConfig } from './models/image-viewer-config.model';
import { CustomImageEvent } from './models/custom-image-event-model';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export declare class AngularImageViewerComponent implements OnInit, OnChanges {
    moduleConfig: ImageViewerConfig;
    private sanitizer;
    src: string[];
    screenHeightOccupied: 0;
    index: number;
    config: ImageViewerConfig;
    indexChange: EventEmitter<number>;
    configChange: EventEmitter<ImageViewerConfig>;
    customImageEvent: EventEmitter<CustomImageEvent>;
    styleHeight: string;
    style: {
        transform: string;
        msTransform: string;
        oTransform: string;
        webkitTransform: string;
    };
    fullscreen: boolean;
    loading: boolean;
    private scale;
    private rotation;
    private translateX;
    private translateY;
    private prevX;
    private prevY;
    private hovered;
    constructor(moduleConfig: ImageViewerConfig, sanitizer: DomSanitizer);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    nextImage(event: any): void;
    prevImage(event: any): void;
    zoomIn(): void;
    zoomOut(): void;
    scrollZoom(evt: any): boolean;
    rotateClockwise(): void;
    rotateCounterClockwise(): void;
    onLoad(url: any): void;
    onLoadStart(url: any): void;
    imageNotFound(url: any): void;
    onDragOver(evt: any): void;
    onDragStart(evt: any): void;
    toggleFullscreen(): void;
    triggerIndexBinding(): void;
    triggerConfigBinding(): void;
    fireCustomEvent(name: any, imageIndex: any): void;
    reset(): void;
    onMouseOver(): void;
    onMouseLeave(): void;
    private canNavigate;
    private updateStyle;
    private mergeConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularImageViewerComponent, [{ optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AngularImageViewerComponent, "angular-image-viewer", never, { "index": "index"; "config": "config"; "src": "src"; "screenHeightOccupied": "screenHeightOccupied"; }, { "indexChange": "indexChange"; "configChange": "configChange"; "customImageEvent": "customImageEvent"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1pbWFnZS12aWV3ZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFuZ3VsYXItaW1hZ2Utdmlld2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbWFnZVZpZXdlckNvbmZpZyB9IGZyb20gJy4vbW9kZWxzL2ltYWdlLXZpZXdlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgQ3VzdG9tSW1hZ2VFdmVudCB9IGZyb20gJy4vbW9kZWxzL2N1c3RvbS1pbWFnZS1ldmVudC1tb2RlbCc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJJbWFnZVZpZXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBtb2R1bGVDb25maWc6IEltYWdlVmlld2VyQ29uZmlnO1xuICAgIHByaXZhdGUgc2FuaXRpemVyO1xuICAgIHNyYzogc3RyaW5nW107XG4gICAgc2NyZWVuSGVpZ2h0T2NjdXBpZWQ6IDA7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBjb25maWc6IEltYWdlVmlld2VyQ29uZmlnO1xuICAgIGluZGV4Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBjb25maWdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxJbWFnZVZpZXdlckNvbmZpZz47XG4gICAgY3VzdG9tSW1hZ2VFdmVudDogRXZlbnRFbWl0dGVyPEN1c3RvbUltYWdlRXZlbnQ+O1xuICAgIHN0eWxlSGVpZ2h0OiBzdHJpbmc7XG4gICAgc3R5bGU6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgICAgIG1zVHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgICAgIG9UcmFuc2Zvcm06IHN0cmluZztcbiAgICAgICAgd2Via2l0VHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgfTtcbiAgICBmdWxsc2NyZWVuOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzY2FsZTtcbiAgICBwcml2YXRlIHJvdGF0aW9uO1xuICAgIHByaXZhdGUgdHJhbnNsYXRlWDtcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVk7XG4gICAgcHJpdmF0ZSBwcmV2WDtcbiAgICBwcml2YXRlIHByZXZZO1xuICAgIHByaXZhdGUgaG92ZXJlZDtcbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGVDb25maWc6IEltYWdlVmlld2VyQ29uZmlnLCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZXh0SW1hZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJldkltYWdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHpvb21JbigpOiB2b2lkO1xuICAgIHpvb21PdXQoKTogdm9pZDtcbiAgICBzY3JvbGxab29tKGV2dDogYW55KTogYm9vbGVhbjtcbiAgICByb3RhdGVDbG9ja3dpc2UoKTogdm9pZDtcbiAgICByb3RhdGVDb3VudGVyQ2xvY2t3aXNlKCk6IHZvaWQ7XG4gICAgb25Mb2FkKHVybDogYW55KTogdm9pZDtcbiAgICBvbkxvYWRTdGFydCh1cmw6IGFueSk6IHZvaWQ7XG4gICAgaW1hZ2VOb3RGb3VuZCh1cmw6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnT3ZlcihldnQ6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnU3RhcnQoZXZ0OiBhbnkpOiB2b2lkO1xuICAgIHRvZ2dsZUZ1bGxzY3JlZW4oKTogdm9pZDtcbiAgICB0cmlnZ2VySW5kZXhCaW5kaW5nKCk6IHZvaWQ7XG4gICAgdHJpZ2dlckNvbmZpZ0JpbmRpbmcoKTogdm9pZDtcbiAgICBmaXJlQ3VzdG9tRXZlbnQobmFtZTogYW55LCBpbWFnZUluZGV4OiBhbnkpOiB2b2lkO1xuICAgIHJlc2V0KCk6IHZvaWQ7XG4gICAgb25Nb3VzZU92ZXIoKTogdm9pZDtcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZDtcbiAgICBwcml2YXRlIGNhbk5hdmlnYXRlO1xuICAgIHByaXZhdGUgdXBkYXRlU3R5bGU7XG4gICAgcHJpdmF0ZSBtZXJnZUNvbmZpZztcbn1cbiJdfQ==